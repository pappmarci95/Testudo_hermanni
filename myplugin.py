# -*- coding: utf-8 -*-
"""
/***************************************************************************
 myplugin
                                 A QGIS plugin
 Does nothing yet.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-10-01
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Papp MÃ¡rton
        email                : pappmarci95@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys
import os
import tempfile
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QDialog, QWidget, QPushButton, QTextBrowser, QLabel, QVBoxLayout, QHBoxLayout, QLineEdit, QListWidget, QComboBox, QRadioButton, QButtonGroup
from random import uniform, sample, randint, shuffle
from qgis.core import *
import processing
from qgis.analysis import QgsZonalStatistics
# from iteration_utilities import deepflatten
import math
import collections
import copy
import time
from decimal import *


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .myplugin_dialog import mypluginDialog
import os.path



class myplugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'myplugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = mypluginDialog()
        self.dlg.get_random.clicked.connect(lambda: self.random_feature_window())


        # Create feedback value for custom quadrant number selection and oversampling:
        self.quadrchecker = 1
        self.is_oversampling = 1

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&myplugin')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'myplugin')
        self.toolbar.setObjectName(u'myplugin')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('myplugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/myplugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&myplugin'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar







    #---------------------------- RANDOM POINT CREATOR -----------------------------------------------------------------



    # Error window for the random point creator:
    def error_window(self, text_error):
        windw = QWidget()
        windw.setWindowTitle("Error Window")
        cancel_button = QPushButton()
        cancel_button.setText("Cancel")
        ok_button = QPushButton()
        ok_button.setText("Again")
        error_text = QTextBrowser()
        label = QLabel()
        label.setText("Press Again to restart the plugin GUI or Cancel to close plugin")
        vbox = QVBoxLayout()
        hbox = QHBoxLayout()
        ok_button.clicked.connect(lambda: self.error_window_ok(windw))
        cancel_button.clicked.connect(lambda: windw.close())
        error_text.append(text_error)
        vbox.addWidget(error_text)
        vbox.addStretch()
        vbox.addWidget(label)
        vbox.addStretch()
        hbox.addWidget(ok_button)
        hbox.addStretch()
        hbox.addWidget(cancel_button)
        hbox.addStretch()
        vbox.addLayout(hbox)
        windw.setLayout(vbox)
        windw.show()


    # Error window closing function which reopens the main dialog window:
    def error_window_ok(self, windw):
        windw.close()
        self.run()

    # Function for checking whether a value is a number:
    def number_check(self, n):
        try:
            float(n)
        except ValueError:
            return False


    # Function for the settings and for the random point creation:
    def randompointcreator(self):
        layname = self.dlg.cbox.currentText()
        layname = str(layname)
        selected_layer = QgsProject.instance().mapLayersByName(layname)[0]
        pointnumber = self.dlg.point_number.text()
        nm = self.dlg.name_widget.text()
        error_print_text = "The following error(s) occured:"
        error_1 = "Random point number should be a number"
        error_2 = "Random point number should be an integer"
        error_3 = "Random point number must be over zero"
        error_4 = "A layer must be selected"
        error_5 = "The selected layer must be a vector layer"
        precheckvalue = int(0)
        isnt_number_value = int(0)
        is_number = self.number_check(pointnumber)
        if is_number == False:
            error_print_text = error_print_text + "\n" + error_1
            precheckvalue = precheckvalue + 1
            isnt_number_value = isnt_number_value + 1
        if isnt_number_value == 0:
            if float(pointnumber) - round(float(pointnumber), 0) != 0:
                error_print_text = error_print_text + "\n" + error_2
                precheckvalue = precheckvalue + 1
            if int(pointnumber) <= 0:
                error_print_text = error_print_text + "\n" + error_3
                precheckvalue = precheckvalue + 1
        if selected_layer is None:
            error_print_text = error_print_text + "\n" + error_4
            precheckvalue = precheckvalue + 1
        if selected_layer.type() != QgsMapLayer.VectorLayer:
            error_print_text = error_print_text + "\n" + error_5
            precheckvalue = precheckvalue + 1
        if precheckvalue != 0:
            " ".join(error_print_text)
            self.error_window(error_print_text)
        else:
            parameters = {'INPUT': selected_layer, 'MIN_DISTANCE': 0, 'POINTS_NUMBER': int(pointnumber), 'OUTPUT': 'TEMPORARY_OUTPUT'}
            rand = processing.run('qgis:randompointsinlayerbounds', parameters)
            randlayer = rand['OUTPUT']
            randlayer.setName(nm)
            QgsProject.instance().addMapLayer(randlayer)






    #------------------------------ RANDOM FEATURES --------------------------------------------------------------------



    # Error window for random feature:
    def error_window_features(self, text_error):
        windw = QWidget()
        windw.setWindowTitle("Error Window")
        cancel_button = QPushButton()
        cancel_button.setText("Cancel")
        cancel_button.clicked.connect(lambda: windw.close())
        error_text = QTextBrowser()
        error_text.append(text_error)
        vbox = QVBoxLayout()
        vbox.addWidget(error_text)
        vbox.addStretch()
        vbox.addWidget(cancel_button)
        vbox.addStretch()
        windw.setLayout(vbox)
        windw.show()


    # Getting information for random feature selection:
    def random_feature_window(self):
        windw = QWidget()
        windw.setWindowTitle("Random features")
        cancel_button = QPushButton()
        cancel_button.setText("Cancel")
        cancel_button.clicked.connect(lambda: windw.close())
        feature_text = QTextBrowser()
        number_label = QLabel()
        number_label.setText("Number of random features:")
        random_number = QLineEdit()
        get_features = QPushButton()
        get_features.setText("Get")
        get_features.clicked.connect(lambda: self.rand_features(random_number, feature_text))
        get_label = QLabel()
        get_label.setText("Get the random features:")
        hbox = QHBoxLayout()
        hbox.addWidget(number_label)
        hbox.addStretch()
        hbox.addWidget(random_number)
        hbox.addStretch()
        hbox2 = QHBoxLayout()
        hbox2.addWidget(get_label)
        hbox2.addStretch()
        hbox2.addWidget(get_features)
        hbox2.addStretch()
        vbox = QVBoxLayout()
        vbox.addLayout(hbox)
        vbox.addLayout(hbox2)
        vbox.addWidget(feature_text)
        vbox.addStretch()
        vbox.addWidget(cancel_button)
        vbox.addStretch()
        windw.setLayout(vbox)
        windw.show()


    # Function to get the features:
    def rand_features(self, numb, text):
        text.clear()
        numb = numb.text()
        layname = self.dlg.cbox.currentText()
        layname = str(layname)
        lay = QgsProject.instance().mapLayersByName(layname)[0]
        error_text = "The following error(s) occured:"
        error_1 = "A layer must be selected"
        error_2 = "The selected layer should have features"
        error_3 = "The number of the random features must be a number"
        error_4 = "The number of desired random features must be over zero"
        error_5 = "The number of random features should be an integer"
        error_6 = "The number of random features can't be over the amount of the layers features"
        precheckvalue = int()
        there_is_layer_value = int()
        if lay is not None:
            there_is_layer_value = there_is_layer_value + 1
        pre_feat_numb = int()
        there_isnt_features_value = int()
        if lay is not None:
            prefeats = lay.getFeatures()
            if prefeats is not None:
                for pref in prefeats:
                    pre_feat_numb = pre_feat_numb + 1
            else:
                there_isnt_features_value = there_isnt_features_value + 1
        else:
            there_isnt_features_value = there_isnt_features_value + 1
        is_number = self.number_check(numb)
        isnt_number_value = int()
        if lay is None:
            error_text = error_text + "\n" + error_1
            precheckvalue = precheckvalue + 1
        if there_is_layer_value == 1:
            if there_isnt_features_value == 1:
                error_text = error_text + "\n" + error_2
                precheckvalue = precheckvalue + 1
        if is_number == False:
            error_text = error_text + "\n" + error_3
            precheckvalue = precheckvalue + 1
            isnt_number_value = isnt_number_value + 1
        if isnt_number_value == 0:
            if float(numb) <= 0:
                error_text = error_text + "\n" + error_4
                precheckvalue = precheckvalue + 1
            if float(numb)-round(float(numb), 0) != 0:
                error_text = error_text + "\n" + error_5
                precheckvalue = precheckvalue + 1
            if there_isnt_features_value == 0:
                if float(numb) > pre_feat_numb:
                    error_text = error_text + "\n" + error_6
                    precheckvalue = precheckvalue + 1
        if precheckvalue != 0:
            " ".join(error_text)
            self.error_window_features(error_text)
        else:
            features = str()
            feats = lay.getFeatures()
            feat_numb = int(0)
            for x in feats:
                feat_numb = feat_numb + 1
            numb = int(numb)
            rand_list = list(range(1, feat_numb))
            rand_numb = sample(rand_list, numb)
            request = QgsFeatureRequest()
            request.setFilterFids(rand_numb)
            specific_features = lay.getFeatures(request)
            for fet in specific_features:
                feat_id = fet.id()
                feat_id = str(feat_id)
                feat = str(fet)
                feature_string = feat_id + ", " + feat + "\n"
                features = features + feature_string
            text.append(features)






    #---------------------------- RASTER LAYER AVERAGING INSIDE POLYGONS -----------------------------------------------



    # Error window for raster processing:
    def errorwindow(self, numb, selected_vect_layer_name):
        text = ""
        if numb == 1:
            text = "There should be a vector layer loaded"
        if numb == 2:
            text = "A layer must be selected"
        if numb == 4:
            text = "There should be a raster layer loaded"
        if numb == 5:
            text = "There should be a feature in the layer"
        if numb == 6:
            text = "There should be a polygon feature among features"
        if numb == 7:
            text = "A layer must be selected"
        if numb == 9:
            text = "One attribute should be selected"
        if numb == 10:
            text = "The number of the attribute selected should be below or equal to the number of attributes the layer have"
        windw = QWidget()
        windw.setWindowTitle("Error window")
        textbox = QTextBrowser()
        textbox.append(text)
        ok_button = QPushButton()
        ok_button.setText("OK")
        if numb == 1:
            ok_button.clicked.connect(lambda: windw.close())
        if numb == 2:
            ok_button.clicked.connect(lambda: self.errorclose(windw))
        if numb == 4:
            ok_button.clicked.connect(lambda: self.errorclose(windw))
        if numb == 7:
            ok_button.clicked.connect(lambda: self.rastlay(selected_vect_layer_name, windw))
        if numb == 5:
            ok_button.clicked.connect(lambda: self.rastlay(selected_vect_layer_name, windw))
        if numb == 6:
            ok_button.clicked.connect(lambda: self.rastlay(selected_vect_layer_name, windw))
        if numb == 9:
            ok_button.clicked.connect(lambda: self.rastlay(selected_vect_layer_name, windw))
        if numb == 10:
            ok_button.clicked.connect(lambda: windw.close())
        vbox = QVBoxLayout()
        vbox.addWidget(textbox)
        vbox.addWidget(ok_button)
        windw.setLayout(vbox)
        windw.show()


    # Function for error window to close itself and open self.raster():
    def errorclose(self, windw):
        windw.close()
        self.raster()


    # Function to get mean of raster data, first the selection of vector data:
    def raster(self):
        loaded_layers = self.iface.mapCanvas().layers()
        vector_layers = []
        for layer in loaded_layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                vector_layers.append(layer)
        loaded_layers = vector_layers
        if not loaded_layers:
            self.errorwindow(1, selected_vect_layer_name=None)
        else:
            loaded_layers_list = []
            for lay in loaded_layers:
                layname = lay.name()
                loaded_layers_list.append(layname)
            windw = QWidget()
            windw.setWindowTitle("Vector layer selection")
            label = QLabel()
            label.setText("Vector layer selection:")
            textbox = QListWidget()
            textbox.addItems(loaded_layers_list)
            ok_button = QPushButton()
            ok_button.setText("OK")
            ok_button.clicked.connect(lambda: self.rastlay(textbox.selectedItems(), windw))
            vbox = QVBoxLayout()
            vbox.addWidget(label)
            vbox.addWidget(textbox)
            vbox.addWidget(ok_button)
            windw.setLayout(vbox)
            windw.show()


    # Function for checking the selected layers name and window for selecting the raster layer, and selecting the attribute
    # to save the raster averages:
    def rastlay(self, selecteditems, windw):
        windw.close()
        selected_vect_layer_name = []
        for item in selecteditems:
            item = item.text()
            selected_vect_layer_name.append(item)
        if not selected_vect_layer_name:
            self.errorwindow(2, selected_vect_layer_name=None)
        else:
            selected_vect_layer = QgsProject.instance().mapLayersByName(selected_vect_layer_name[0])[0]
            vectlayattrs = []
            for field in selected_vect_layer.fields():
                vectlayattrs.append(field.name())
            loaded_layers = self.iface.mapCanvas().layers()
            raster_layers = []
            for layer in loaded_layers:
                if layer.type() == QgsMapLayer.RasterLayer:
                    raster_layers.append(layer)
            loaded_layers = raster_layers
            if not loaded_layers:
                self.errorwindow(4, selected_vect_layer_name=None)
            else:
                loaded_layers_list = []
                for lay in loaded_layers:
                    layname = lay.name()
                    loaded_layers_list.append(layname)
                windw = QWidget()
                windw.setWindowTitle("Raster layer and attribute selection")
                label1 = QLabel()
                label1.setText("Raster layer selection:")
                label2 = QLabel()
                label2.setText("Attribute selection:")
                textbox = QListWidget()
                textbox.addItems(loaded_layers_list)
                list = QComboBox()
                list.clear()
                list.addItems(vectlayattrs)
                ok_button = QPushButton()
                ok_button.setText("OK")
                ok_button.clicked.connect(lambda: self.rasterlaycheck(windw, selected_vect_layer, textbox.selectedItems(), list.currentText()))
                vbox = QVBoxLayout()
                vbox.addWidget(label1)
                vbox.addWidget(textbox)
                vbox.addWidget(label2)
                vbox.addWidget(list)
                vbox.addWidget(ok_button)
                windw.setLayout(vbox)
                windw.show()


    # Function for checking raster layer if it has a unique name and getting the selected attributes index:
    def rasterlaycheck(self, windw, selected_vect_layer, selecteditems, selecteditems2):
        windw.close()
        attrname = str(selecteditems2)
        if not attrname:
            self.errorwindow(9, selected_vect_layer)
        attrindex = selected_vect_layer.fields().indexFromName(attrname)
        selected_rast_layer_name = []
        for item in selecteditems:
            item = item.text()
            selected_rast_layer_name.append(item)
        if not selected_rast_layer_name:
            self.errorwindow(7, selected_vect_layer)
        else:
            selected_rast_layer = QgsProject.instance().mapLayersByName(selected_rast_layer_name[0])[0]
            self.rastertopolygon(selected_vect_layer, selected_rast_layer, attrindex)


    # Function to acquire the information for polygons and doing the averaging:
    def rastertopolygon(self, selected_vect_layer, selected_rast_layer, attrnumb):
        attrtofill = int(attrnumb)
        vect_features = selected_vect_layer.getFeatures()
        if not vect_features:
            self.errorwindow(5, selected_vect_layer)
        else:
            features = []
            for feature in vect_features:
                geom = feature.geometry()
                if geom.type() == QgsWkbTypes.PolygonGeometry:
                    features.append(feature)
            if not features:
                self.errorwindow(6, selected_vect_layer)
            else:
                selected_vect_layer.startEditing()
                filenumber = 1
                with tempfile.TemporaryDirectory() as tempdir:
                    for feature in features:
                        pathtosave = str(tempdir)+'/'+'memory'+str(filenumber)+'.tif'
                        fid = feature.id()
                        memory_layer = selected_vect_layer.materialize(QgsFeatureRequest().setFilterFid(fid))
                        parameters = {'INPUT': selected_rast_layer, 'MASK': memory_layer, 'NO_DATA': 0, 'ALPHA_BAND': False, 'KEEP_RESOLUTION': True, 'OUTPUT': pathtosave}
                        processing.run('gdal:cliprasterbymasklayer', parameters)
                        rastname = "test" + str(filenumber)
                        rasterlayer = QgsRasterLayer(pathtosave, rastname)
                        raster_provider = rasterlayer.dataProvider()
                        raster_extent = raster_provider.extent()
                        stats = raster_provider.bandStatistics(1, QgsRasterBandStats.All, raster_extent, 0)
                        mean = stats.mean
                        selected_vect_layer.changeAttributeValue(fid, attrtofill, mean)
                        filenumber = filenumber + 1
                selected_vect_layer.updateFields()
                selected_vect_layer.commitChanges()
                zonestat = QgsZonalStatistics(selected_vect_layer, selected_rast_layer, 'rast-', 1, QgsZonalStatistics.Mean)
                zonestat.calculateStatistics(None)
                self.infowindow(selected_vect_layer, selected_rast_layer, attrtofill)


    # Window for returning information made by the previous code:
    def infowindow(self, selected_vect_layer, selected_rast_layer, attrnumb):
        selected_vect_layer_name = selected_vect_layer.name()
        selected_rast_layer_name = selected_rast_layer.name()
        index = str(attrnumb)
        attrnumb = int(attrnumb) + 1
        attrnumb = str(attrnumb)
        infoline = "The following vector layer was selected: " + selected_vect_layer_name + "\n" + "The following raster layer was selected: " + selected_rast_layer_name + "\n" + "The follofwing attrubte was selelcted: " + attrnumb + " [index: " + index + "]"
        windw = QWidget()
        windw.setWindowTitle("Information window")
        infobox = QTextBrowser()
        infobox.append(infoline)
        ok_button = QPushButton()
        ok_button.setText("OK")
        ok_button.clicked.connect(lambda: windw.close())
        vbox = QVBoxLayout()
        vbox.addWidget(infobox)
        vbox.addWidget(ok_button)
        windw.setLayout(vbox)
        windw.show()






    #----------------------------------GRTS METHOD APPLICATION----------------------------------------------------------------


    # Generator function to flatten multiple nested lists:
    def flatten(self, l):
        for el in l:
            if isinstance(el, collections.abc.Iterable) and not isinstance(el, (str, bytes)):
                yield from self.flatten(el)
            else:
                yield el


    # Error window for grid settings:
    def errorforquadr(self, error_text):
        windw = QWidget()
        windw.setWindowTitle("Error Window")
        label = QLabel("The following error(s) occured (Please press OK to go back to the settings window):")
        text = QTextBrowser()
        error_text = ', '.join(error_text)
        text.append(error_text)
        ok_button = QPushButton()
        ok_button.setText("OK")
        ok_button.clicked.connect(lambda: self.error_ok(windw))
        vbox = QVBoxLayout()
        vbox.addWidget(label)
        vbox.addWidget(text)
        vbox.addStretch(3)
        vbox.addWidget(ok_button)
        windw.setLayout(vbox)
        windw.show()


    # Function for the error window if the while loop is longer than it should:
    def error_while(self):
        windw = QWidget()
        windw.setWindowTitle("ERROR WINDOW")
        label = QLabel("The polygon ID field generation lasted longer than it should! Please check the amount of fields with name grts_id and a number!")
        cancel_button = QPushButton("CANCEL")
        cancel_button.clicked.connect(lambda: windw.close())
        vbox = QVBoxLayout()
        vbox.addWidget(label)
        vbox.addWidget(cancel_button)
        windw.setLayout(vbox)
        windw.show()


    # Function that closes the error window and opens the sampling settings window again:
    def error_ok(self, windw):
        windw.close()
        self.samplinglayer()


    # Checking if the number is an integer:
    def integer_check(self, n):
        notintvalue = 0
        try:
            float(n)
        except ValueError:
            notintvalue = notintvalue + 1
        if notintvalue == 0:
            if float(n) - round(float(n), 0) != 0:
                notintvalue = notintvalue + 1
        if notintvalue != 0:
            isintvalue = 1
            return isintvalue
        else:
            isintvalue = 0
            return isintvalue


    # Window for layer selection:
    def samplinglayer(self):
        windw = QWidget()
        windw.setWindowTitle("GRTS AERIAL SAMPLING SETTINGS")
        text0 = QLabel("Please select the vector layer you want to use for sampling:")
        cbox = QComboBox()
        cbox.clear()
        loaded_layers = self.iface.mapCanvas().layers()
        vector_layers = []
        for layer in loaded_layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                vector_layers.append(layer)
        loaded_layers = vector_layers
        loaded_layers_name = []
        for layer in loaded_layers:
            name = layer.name()
            loaded_layers_name.append(name)
        cbox.addItems(loaded_layers_name)
        text1 = QLabel("Please enter the number of samples:")
        numb = QLineEdit()
        text3 = QLabel("Please enter the power of four you'd like to use for grid placement(only available when custom grid number is selected):")
        custom_quadr = QLineEdit()
        custom_quadr.setEnabled(False)
        text2 = QLabel("If you would like to give the number of grid cells used for sampling, please select the correct option:")
        label1 = QLabel("Default grid number:")
        label2 = QLabel("Custom grid number:")
        text4 = QLabel("For activating oversampling select the correct button:")
        label3 = QLabel("Not use oversampling:")
        label4 = QLabel("Use oversampling:")
        text5 = QLabel("Please enter the desired additional sampling number(if oversampling is enabled):")
        self.quadrchecker = 1
        self.is_oversampling = 1
        grid_group = QButtonGroup(windw)
        button_def = QRadioButton()
        button_def.setChecked(True)
        button_def.toggled.connect(lambda: self.deftoggled(custom_quadr))
        button_custom = QRadioButton()
        button_custom.toggled.connect(lambda: self.customtoggled(custom_quadr))
        grid_group.addButton(button_def)
        grid_group.addButton(button_custom)
        oversampling_group = QButtonGroup(windw)
        button_not_oversampling = QRadioButton()
        button_not_oversampling.setChecked(True)
        button_not_oversampling.toggled.connect(lambda: self.notoversample(oversample))
        button_oversampling = QRadioButton()
        button_oversampling.toggled.connect(lambda: self.oversample(oversample))
        oversampling_group.addButton(button_not_oversampling)
        oversampling_group.addButton(button_oversampling)
        oversample = QLineEdit()
        oversample.setEnabled(False)
        okbutton = QPushButton()
        okbutton.setText("OK")
        okbutton.clicked.connect(lambda: self.gridplacement(cbox.currentText(), numb.text(), custom_quadr.text(), self.quadrchecker, windw, oversample.text(), self.is_oversampling))
        cancelbutton = QPushButton()
        cancelbutton.setText("CANCEL")
        cancelbutton.clicked.connect(lambda: windw.close())
        hbox1 = QHBoxLayout()
        hbox1.addStretch()
        hbox1.addWidget(text0)
        hbox1.addStretch(5)
        hbox2 = QHBoxLayout()
        hbox2.addStretch()
        hbox2.addWidget(cbox)
        hbox2.addStretch(4)
        hbox3 = QHBoxLayout()
        hbox3.addStretch()
        hbox3.addWidget(text1)
        hbox3.addStretch(1)
        hbox3.addWidget(numb)
        hbox3.addStretch(15)
        hbox4 = QHBoxLayout()
        hbox4.addStretch(0)
        hbox4.addWidget(text2)
        hbox4.addStretch(2)
        hbox5 = QHBoxLayout()
        hbox5.addStretch()
        hbox5.addWidget(label1)
        hbox5.addStretch(1)
        hbox5.addWidget(button_def)
        hbox5.addStretch(10)
        hbox5.addWidget(label2)
        hbox5.addStretch(1)
        hbox5.addWidget(button_custom)
        hbox5.addStretch(10)
        hbox6 = QHBoxLayout()
        hbox6.addStretch()
        hbox6.addWidget(text3)
        hbox6.addStretch(1)
        hbox6.addWidget(custom_quadr)
        hbox6.addStretch(2)
        hbox7 = QHBoxLayout()
        hbox7.addWidget(text4)
        hbox7.addStretch()
        hbox8 = QHBoxLayout()
        hbox8.addStretch()
        hbox8.addWidget(label3)
        hbox8.addStretch(1)
        hbox8.addWidget(button_not_oversampling)
        hbox8.addStretch(10)
        hbox8.addWidget(label4)
        hbox8.addStretch(1)
        hbox8.addWidget(button_oversampling)
        hbox8.addStretch(10)
        hbox9 = QHBoxLayout()
        hbox9.addStretch()
        hbox9.addWidget(text5)
        hbox9.addStretch(1)
        hbox9.addWidget(oversample)
        hbox9.addStretch(2)
        hbox10 = QHBoxLayout()
        hbox10.addStretch(5)
        hbox10.addWidget(okbutton)
        hbox10.addStretch(2)
        hbox10.addWidget(cancelbutton)
        hbox10.addStretch(5)
        vbox = QVBoxLayout()
        vbox.addStretch(2)
        vbox.addLayout(hbox1)
        vbox.addStretch(1)
        vbox.addLayout(hbox2)
        vbox.addStretch(1)
        vbox.addLayout(hbox3)
        vbox.addStretch(1)
        vbox.addLayout(hbox4)
        vbox.addStretch(1)
        vbox.addLayout(hbox5)
        vbox.addStretch(1)
        vbox.addLayout(hbox6)
        vbox.addStretch(1)
        vbox.addLayout(hbox7)
        vbox.addStretch(1)
        vbox.addLayout(hbox8)
        vbox.addStretch(1)
        vbox.addLayout(hbox9)
        vbox.addStretch(1)
        vbox.addLayout(hbox10)
        vbox.addStretch(2)
        windw.setLayout(vbox)
        windw.show()


    # Function for using default quadrant ammount:
    def deftoggled(self, custom_quadr):
        self.quadrchecker = 1
        custom_quadr.setEnabled(False)


    # Function for using custom quadrant ammount:
    def customtoggled(self, custom_quadr):
        self.quadrchecker = 2
        custom_quadr.setEnabled(True)


    # Function for the disable oversampling button:
    def notoversample(self, oversample):
        self.is_oversampling = 1
        oversample.setEnabled(False)

    # Function for oversample button:
    def oversample(self, oversample):
        self.is_oversampling = 2
        oversample.setEnabled(True)


    # Grid placement on the layer:
    def gridplacement(self, layer, samp_number, custom, quadrchecker, windw, oversample, is_oversampling):
        windw.close()
        erro_text = []
        is_error = 0
        samp_number_problem = 0
        oversample_porblem = 0
        if not layer:
            erro_text.append("A layer should be selected")
            is_error = is_error + 1
        if not samp_number:
            erro_text.append("A sample number must be given")
            is_error = is_error + 1
            samp_number_problem = samp_number_problem + 1
        else:
            isintvalue = self.integer_check(samp_number)
            if isintvalue != 0:
                erro_text.append("The sample number must be an integer")
                is_error = is_error + 1
                samp_number_problem = samp_number_problem + 1
            else:
                if int(samp_number) < 0:
                    erro_text.append("The number of desired samples must be over zero")
                    is_error = is_error + 1
                    samp_number_problem = samp_number_problem + 1
        if is_oversampling == 2:
            if not oversample:
                erro_text.append("If oversampling is selected there should be a number of additional samples")
                is_error = is_error + 1
                oversample_porblem = oversample_porblem + 1
            else:
                isintover = self.integer_check(oversample)
                if isintover != 0:
                    erro_text.append("The number of additional samples must be an integer")
                    is_error = is_error + 1
                    oversample_porblem = oversample_porblem + 1
                else:
                    if int(oversample) < 0:
                        erro_text.append("The number of additional samples must be over zero")
                        is_error = is_error + 1
                        oversample_porblem = oversample_porblem + 1
        if oversample_porblem == 0 and samp_number_problem == 0 and is_oversampling == 2:
            samp_number = int(samp_number) + int(oversample)
        if quadrchecker == 1:
            if samp_number_problem == 0 and oversample_porblem == 0:
                cellgen = int(math.ceil(math.log(int(samp_number), 4) + 2))
                cellnumb = 4**cellgen
        if quadrchecker == 2:
            if samp_number_problem == 0 and oversample_porblem == 0:
                if not custom:
                    erro_text.append("The custom power of four must be given if custom is selected")
                    is_error = is_error + 1
                else:
                    customisint = self.integer_check(custom)
                    if customisint != 0:
                        erro_text.append("The custom power of four must be an integer")
                        is_error = is_error + 1
                    else:
                        if int(custom) < 0:
                            erro_text.append("The custom power of four must be over zero")
                            is_error = is_error + 1
                        else:
                            cellgen = int(math.ceil(math.log(int(samp_number), 4) + 2))
                            if cellgen > int(custom):
                                erro_text.append("If custom quadrant number is selected, the selected power of 4 should be higher than the default(base 4 logarithm of the selected sample numbers plus 2)")
                                is_error = is_error + 1
                            if int(custom) >= cellgen:
                                cellgen = int(custom)
                                cellnumb = 4**cellgen
        if is_error != 0:
            self.errorforquadr(erro_text)
        else:
            layer = QgsProject.instance().mapLayersByName(layer)[0]
            layextent = layer.extent()
            xextentmax = layextent.xMaximum()
            xextentmin = layextent.xMinimum()
            yextentmax = layextent.yMaximum()
            yextentmin = layextent.yMinimum()
            xextentmax = float(xextentmax)
            xextentmin = float(xextentmin)
            yextentmax = float(yextentmax)
            yextentmin = float(yextentmin)
            xrange = xextentmax - xextentmin
            yrange = yextentmax - yextentmin
            basenumb = int()
            if xrange > yrange:
                basenumb = 1
            if yrange > xrange:
                basenumb = 2
            if basenumb == 1:
                rangedif = xrange - yrange
                rangeadd = rangedif / 2
                yextentmax = yextentmax + rangeadd
                yextentmin = yextentmin - rangeadd
                xextentmax = xextentmax
                xextentmin = xextentmin
            if basenumb == 2:
                rangedif = yrange - xrange
                rangeadd = rangedif / 2
                xextentmax = xextentmax + rangeadd
                xextentmin = xextentmin - rangeadd
                yextentmax = yextentmax
                yextentmin = yextentmin
            cellx = (xextentmax-xextentmin) / (2**cellgen)
            celly = (yextentmax-yextentmin) / (2**cellgen)
            addx = (cellx * (2**cellgen)) / ((2**cellgen) - 1)
            addy = addx
            xextentmax = xextentmax + addx
            yextentmax = yextentmax + addy
            randfractx = round(uniform(1, 100), 1)
            randfracty = round(uniform(1, 100), 1)
            addx1 = addx / randfractx
            addx2 = addx - addx1
            addy1 = addy / randfracty
            addy2 = addy - addy1
            randnumbx = randint(1, 2)
            randnumby = randint(1, 2)
            if randnumbx == 1:
                xextentmax = xextentmax + addx1
                xextentmin = xextentmin - addx2
            if randnumbx == 2:
                xextentmax = xextentmax + addx2
                xextentmin = xextentmin - addx1
            if randnumby == 1:
                yextentmax = yextentmax + addy1
                yextentmin = yextentmin - addy2
            if randnumby == 2:
                yextentmax = yextentmax + addy2
                yextentmin = yextentmin - addy1
            cellx = (xextentmax - xextentmin) / (2**cellgen)
            celly = (yextentmax - yextentmin) / (2**cellgen)
            extent = str(xextentmin) + ',' + str(xextentmax) + ',' + str(yextentmin) + ',' + str(yextentmax)
            crs = layer.crs()
            parameters = {'EXTENT': extent, 'HSPACING': cellx, 'VSPACING': celly, 'TYPE': 2, 'CRS': crs,'OUTPUT': 'TEMPORARY_OUTPUT', 'HOVERLAY': 0, 'VOVERLAY': 0}
            grid = processing.run('qgis:creategrid', parameters)
            gridlay = grid['OUTPUT']
            self.gridorder(cellgen, cellnumb, layer, gridlay, samp_number, oversample, is_oversampling)


    # Creating the order of cell IDs to match the here created hierarchical order of cell serial numbers:
    def gridorder(self, cellgen, cellnumb, layer, gridlayer, samp_numb, oversample, is_oversampling):
        numblist = []
        for i in range(1, (cellnumb + 1)):
            numblist.append(i)
        initlist = []
        for i in range(1, (2**cellgen + 1), 2):
            for x in range(1, (2**cellgen + 1), 2):
                number = numblist[i + ((x - 1) * (2**cellgen)) - 1]
                initlist.append(number)
        newlist = []
        for i in initlist:
            listquadr = [numblist[i-1], numblist[i + (2**cellgen) - 1], numblist[i], numblist[i + (2**cellgen)]]
            newlist.append(listquadr)
        numblist = newlist
        if cellgen > 2:
            for i in range(1, (cellgen - 1)):
                usedlist = []
                newlist = []
                for x in range(len(numblist)):
                    if numblist[x] not in usedlist:
                        listquadr = [numblist[x], numblist[x + 1], numblist[x + (2**(cellgen - i))], numblist[x + (2**(cellgen - i)) + 1]]
                        newlist.append(listquadr)
                        usedlist.append(numblist[x])
                        usedlist.append(numblist[x + 1])
                        usedlist.append(numblist[x + (2**(cellgen - i))])
                        usedlist.append(numblist[x + (2**(cellgen - i)) + 1])
                numblist = newlist
        numblist = list(self.flatten(numblist))
        orderlist = [1, 2, 3, 4]
        shuffle(orderlist)
        for i in range(1, cellgen):
            newlist = list()
            for x in orderlist:
                randperm = [1, 2, 3, 4]
                shuffle(randperm)
                for y in randperm:
                    elem = str(x) + str(y)
                    newlist.append(elem)
            orderlist = newlist
        orderlist = list(map(int, orderlist))
        orderlist_old = copy.deepcopy(orderlist)
        if is_oversampling == 2:
            revord = []
            for elem in orderlist:
                elem = str(elem)
                elem = ''.join(reversed(elem))
                elem = int(elem)
                revord.append(elem)
            orderlist = revord
        gridfeatures = gridlayer.getFeatures()
        attrindex = gridlayer.fields().indexFromName("id")
        gridlayer.startEditing()
        for feat in gridfeatures:
            attrs = feat.attributes()
            idnumb = attrs[attrindex]
            indofid = numblist.index(idnumb)
            ordnumb = orderlist[indofid]
            gridlayer.changeAttributeValue(feat.id(), attrindex, ordnumb)
        gridlayer.commitChanges()
        self.sampl(gridlayer, layer, samp_numb, oversample)


    # Defining a function for grid sorting in the next section:
    def get_name(self, ft):
        return ft['id']


    # Function for creating the sample line:
    def sampl(self, gridlayer, layer, samp_numb, oversample):
        # Creating an ID field (named grts_id) for polygons for future references (values will be assigned in the next section):
        field_names = []
        for f in layer.fields():
            field_names.append(f.name())
        probenumb = 1
        id_error = 0
        timeout = time.time() + 60
        idfieldname_index = int()
        idfieldname_orig = str()
        while True:
            idfieldname = "grts_id" + str(probenumb)
            if idfieldname not in field_names:
                layer.dataProvider().addAttributes([QgsField(idfieldname, QVariant.Int)])
                layer.updateFields()
                idfieldname_orig = copy.deepcopy(idfieldname)
                idfieldname_index = layer.fields().indexFromName(idfieldname)
                break
            if time.time() > timeout:
                id_error = 1
                break
            else:
                probenumb = probenumb + 1
        if id_error == 1:
            self.error_while()
        else:
            idfieldname = idfieldname_orig
            # Getting whole polygons' inclusion probabilities
            # (by creating a list containing the list of ids, areas and line segments of each polygons)
            # (plus filling the polygon id field):
            getcontext().prec = 10
            layarea = Decimal()
            features = layer.getFeatures()
            for fet in features:
                geom = fet.geometry()
                area = geom.area()
                area = Decimal(area)
                layarea = layarea + area
            layarea = Decimal(layarea)
            wholeline = int(samp_numb) * 100000
            wholeline = Decimal(wholeline)
            polygon_probs = []
            idnumb = 1
            fts = layer.getFeatures()
            layer.startEditing()
            for feat in fts:
                fid = feat.id()
                layer.changeAttributeValue(fid, idfieldname_index, idnumb)
                polylist = [idnumb]
                geom = feat.geometry()
                area = geom.area()
                area = Decimal(area)
                polylist.append(area)
                area_ratio = area / layarea
                polyline = wholeline * area_ratio
                polyline = int(polyline)
                polylist.append(polyline)
                polygon_probs.append(polylist)
                idnumb = idnumb + 1
            layer.updateFields()
            layer.commitChanges()
            # Cutting the grid layer by the original layer to be sampled:
            params = {'INPUT': gridlayer, 'OVERLAY': layer, 'OUTPUT': 'TEMPORARY_OUTPUT'}
            cutted = processing.run('native:clip', params)
            cuttedlayer = cutted['OUTPUT']
            # Sorting grid features by the id:
            feats = cuttedlayer.getFeatures()
            idindex = cuttedlayer.fields().indexFromName("id")
            feats = sorted(feats, key = self.get_name)
            # Looping through the sorted features and get the data of its line segment
            # (a list of two lists; in the first list there is the quadrant id and will be the extent of the line segment,
            # and in the second list there are lists containing the id of the polygon and the extent of it inside the quadrant):
            sample_order_list = []
            line_length = 0
            begin = 0
            begin_for_whole_quadrant = 0
            dict = {}
            for feat in feats:
                # First assign the id of the grid to the first list and then get the polygons inside the grid:
                featattrs = feat.attributes()
                feat_order = featattrs[idindex]
                ordrange = [feat_order]
                fid = feat.id()
                feataslay = cuttedlayer.materialize(QgsFeatureRequest().setFilterFid(fid))
                pars = {'INPUT': layer, 'OVERLAY': feataslay, 'OUTPUT': 'TEMPORARY_OUTPUT'}
                onelay = processing.run('native:clip', pars)
                onelayer = onelay['OUTPUT']
                dict["grid_" + str(feat_order)] = onelayer
                # Creating the information list of the polygons (id, order, length in the line):
                ft = onelayer.getFeatures()
                polylist = []
                ord = 1
                for fit in ft:
                    featdata = []
                    featattrs = fit.attributes()
                    featid = featattrs[idfieldname_index]
                    featdata.append(featid)
                    featdata.append(ord)
                    for elem in polygon_probs:
                        if elem[0] == featid:
                            geom = fit.geometry()
                            area = geom.area()
                            area = Decimal(area)
                            arearatio = area / elem[1]
                            arearatio = Decimal(arearatio)
                            featlength = elem[2] * arearatio
                            featlength = int(featlength)
                            featdata.append(featlength)
                        else:
                             pass
                    polylist.append(featdata)
                    ord = ord + 1
                # Creating the random permutation of the polygons and its place on the line (It is the final_order_polygons)
                # and calculating the length of the whole line of the quadrant:
                randperm = [*range(1, (ord + 1))]
                shuffle(randperm)
                final_order_polygons = []
                whole_line_length = int()
                for i in randperm:
                    for el in polylist:
                        if el[1] == i:
                            polydata = [el[0]]
                            polyplace = [*range(begin, (begin + el[2] + 1))]
                            polydata.append(polyplace)
                            final_order_polygons.append(polydata)
                            whole_line_length = whole_line_length + el[2]
                            begin = begin + el[2]
                        else:
                            pass
                # Assigning the whole line length to the list containing the polygon id
                # and assigning the quadrants line length to the variable holding the whole line (line_length):
                line_length = line_length + whole_line_length
                whole_line_length_as_number = copy.deepcopy(whole_line_length)
                whole_line_length = [*range(begin_for_whole_quadrant, (begin_for_whole_quadrant + whole_line_length + 1))]
                ordrange.append(whole_line_length)
                begin_for_whole_quadrant = begin_for_whole_quadrant + whole_line_length_as_number
                # Creating a list of the quadrant infromation list (ordrange)
                # and the polygon information list (final_order_polygons):
                final_list = [ordrange, final_order_polygons]
                # Assigning this final list to the final list of the quadrant line information:
                sample_order_list.append(final_list)
            # Calling the next function to sample the line created in here:
            self.getsample(sample_order_list, line_length, samp_numb, dict, layer, cuttedlayer, idfieldname, gridlayer, oversample)


    # Function for get the element for samples sorting in the next section:
    def sampsort(self, sample):
        return sample[0]


    # Function for getting the sample:
    def getsample(self, sample_order_list, line_length, samp_numb, dict, layer, cuttedlayer, idfieldname, gridlayer, oversample):
        # Getting the line points from a systematic sampling method:
        recent_elem = randint(1, line_length)
        line_numbers = [recent_elem]
        line_step = line_length / int(samp_numb)
        for y in range(1, int(samp_numb)):
            line_numb = recent_elem + line_step
            if line_numb <= line_length:
                line_numb = math.trunc(line_numb)
                line_numbers.append(line_numb)
                recent_elem = line_numb
            else:
                line_numb = line_numb - line_length
                line_numb = math.trunc(line_numb)
                line_numbers.append(line_numb)
                recent_elem = line_numb
        # Getting the ids from the previously got line points:
        samples = []
        for elem in sample_order_list:
            for samp in line_numbers:
                if samp in elem[0][1]:
                    for el in elem[1]:
                        if samp in el[1]:
                            this_samp = [elem[0][0], el[0]]
                            samples.append(this_samp)
        # Creating a layer for the sample points (with 4 attributes, order_number, serial_number, x_coordinate, y_coordinate):
        origcrs = layer.crs().authid()
        sample_point_layer = QgsVectorLayer("Point?crs={0}".format(origcrs), "sample_points", "memory")
        pr = sample_point_layer.dataProvider()
        sample_point_layer.startEditing()
        pr.addAttributes([QgsField("Order_number", QVariant.String), QgsField("Serial_number", QVariant.String), QgsField("X_Coordinate", QVariant.Double), QgsField("Y_Coordinate", QVariant.Double)])
        sample_point_layer.updateFields()
        QgsProject.instance().addMapLayer(sample_point_layer)
        # Creating a layer for the oversample points if oversampling is selected:
        if self.is_oversampling == 2:
            oversample_point_layer = QgsVectorLayer("Point?crs={0}".format(origcrs), "oversample_points", "memory")
            opr = oversample_point_layer.dataProvider()
            oversample_point_layer.startEditing()
            opr.addAttributes([QgsField("Order_number", QVariant.String), QgsField("Serial_number", QVariant.String), QgsField("X_Coordinate", QVariant.Double), QgsField("Y_Coordinate", QVariant.Double)])
            oversample_point_layer.updateFields()
            QgsProject.instance().addMapLayer(oversample_point_layer)
        # Taking-apart the oversample component of the sample number from the real sample amount (if there is oversampling):
        if self.is_oversampling == 2:
            samp_numb = int(samp_numb) - int(oversample)
        # Generating random points in the selected polygon fragments:
        cutfeats = cuttedlayer.getFeatures()
        cutfeats = sorted(cutfeats, key = self.get_name)
        idindex = cuttedlayer.fields().indexFromName("id")
        samples = sorted(samples, key = self.sampsort)
        serial = 1
        samp_counter = 0
        for cf in cutfeats:
            if samp_counter == samp_numb:
                break
            cfatts = cf.attributes()
            for sampl in samples:
                if cfatts[idindex] == sampl[0]:
                    samplay = dict.get("grid_" + str(cfatts[idindex]))
                    samppointlayfeats = samplay.getFeatures()
                    smplf_id_index = samplay.fields().indexFromName(idfieldname)
                    for smplf in samppointlayfeats:
                        if smplf[smplf_id_index] == sampl[1]:
                            fid = smplf.id()
                            laytorandpoint = samplay.materialize(QgsFeatureRequest().setFilterFid(fid))
                            parameters = {'INPUT': laytorandpoint, 'MIN_DISTANCE': 0, 'POINTS_NUMBER': 1, 'OUTPUT': 'TEMPORARY_OUTPUT'}
                            rand = processing.run('qgis:randompointsinlayerbounds', parameters)
                            randlayer = rand['OUTPUT']
                            rand_features = randlayer.getFeatures()
                            for randfet in rand_features:
                                randgeom = randfet.geometry()
                            fet = QgsFeature()
                            fet.setGeometry(randgeom)
                            fet.setAttributes([str(cfatts[idindex]), str(serial), str(randgeom.asPoint()[0]), str(randgeom.asPoint()[1])])
                            pr.addFeatures([fet])
                            serial = serial + 1
                            sampind = samples.index(sampl)
                            del samples[sampind]
                            samp_counter = samp_counter + 1
                            break
                        else:
                            pass
        # Additional sample creation if oversampling is enabled:
        if self.is_oversampling == 2:
            oscutfeats = cuttedlayer.getFeatures()
            oscutfeats = sorted(cutfeats, key=self.get_name)
            serial = 1
            for oscf in oscutfeats:
                oscfatts = oscf.attributes()
                for samp in samples:
                    if oscfatts[idindex] == samp[0]:
                        samplayer = dict.get("grid_" + str(oscfatts[idindex]))
                        samppointlayerfeats = samplayer.getFeatures()
                        smplrf_id_index = samplayer.fields().indexFromName(idfieldname)
                        for smplrf in samppointlayerfeats:
                            if smplrf[smplrf_id_index] == samp[1]:
                                fd = smplrf.id()
                                layertorandpoint = samplayer.materialize(QgsFeatureRequest().setFilterFid(fd))
                                params = {'INPUT': layertorandpoint, 'MIN_DISTANCE': 0, 'POINTS_NUMBER': 1, 'OUTPUT': 'TEMPORARY_OUTPUT'}
                                osrand = processing.run('qgis:randompointsinlayerbounds', params)
                                osrandlayer = osrand['OUTPUT']
                                osrand_features = osrandlayer.getFeatures()
                                for osrandfet in osrand_features:
                                    osrandgeom = osrandfet.geometry()
                                osfet = QgsFeature()
                                osfet.setGeometry(osrandgeom)
                                osfet.setAttributes([str(oscfatts[idindex]), str(serial), str(osrandgeom.asPoint()[0]),
                                                   str(osrandgeom.asPoint()[1])])
                                opr.addFeatures([osfet])
                                serial = serial + 1
                                sampind = samples.index(samp)
                                del samples[sampind]
                                break
                            else:
                                pass
        self.dlg.close()
        self.openlays(gridlayer, cuttedlayer, dict)


    # Function for loading intermedier layers:
    def openlays(self, gridlayer, cuttedlayer, dict):
        gridlayer.setName("memory_grid")
        cuttedlayer.setName("cutted_grid_layer")
        windw = QWidget()
        windw.setWindowTitle("Intermedier layers")
        label0 = QLabel("Window for loading the intermedier layers used by the program. It is only available for the development phase!")
        label1 = QLabel('For loading the grid layer press "GRID" button:')
        button1 = QPushButton("GRID")
        button1.clicked.connect(lambda: self.loadgrid(gridlayer))
        label2 = QLabel('For loading the cutted grid layer press "CUTTED" button:')
        button2 = QPushButton("CUTTED")
        button2.clicked.connect(lambda: self.loadcutted(cuttedlayer))
        label3 = QLabel('For loading the polygon layers inside the grid cells:')
        button3 = QPushButton("GRID_POLYGON")
        grid_polygon_checker = 0
        button3.clicked.connect(lambda: self.grid_polygon(dict, grid_polygon_checker))
        cancel_button = QPushButton("CANCEL")
        cancel_button.clicked.connect(lambda: windw.close())
        hbox1 = QHBoxLayout()
        hbox1.addStretch(2)
        hbox1.addWidget(label1)
        hbox1.addWidget(button1)
        hbox1.addStretch(2)
        hbox2 = QHBoxLayout()
        hbox2.addStretch(2)
        hbox2.addWidget(label2)
        hbox2.addWidget(button2)
        hbox2.addStretch(2)
        hbox3 = QHBoxLayout()
        hbox3.addStretch(2)
        hbox3.addWidget(label3)
        hbox3.addWidget(button3)
        hbox3.addStretch(2)
        hbox4 = QHBoxLayout()
        hbox4.addStretch(6)
        hbox4.addWidget(cancel_button)
        hbox4.addStretch(6)
        vbox = QVBoxLayout()
        vbox.addStretch(2)
        vbox.addWidget(label0)
        vbox.addStretch(1)
        vbox.addLayout(hbox1)
        vbox.addStretch(1)
        vbox.addLayout(hbox2)
        vbox.addStretch(1)
        vbox.addLayout(hbox3)
        vbox.addStretch(1)
        vbox.addLayout(hbox4)
        vbox.addStretch(2)
        windw.setLayout(vbox)
        windw.show()


    # Function for loading the grid layer:
    def loadgrid(self, gridlayer):
        layers = QgsProject.instance().mapLayers().values()
        loadedvalue = 0
        for lay in layers:
            if lay.name() == "memory_grid":
                loadedvalue = loadedvalue + 1
        if loadedvalue != 0:
            self.alreadyloaded()
        else:
            QgsProject.instance().addMapLayer(gridlayer)


    # Function for loading the cutted grid layer:
    def loadcutted(self, cuttedlayer):
        layers = QgsProject.instance().mapLayers().values()
        loadedvalue = 0
        for lay in layers:
            if lay.name() == "cutted_grid_layer":
                loadedvalue = loadedvalue + 1
        if loadedvalue != 0:
            self.alreadyloaded()
        else:
            QgsProject.instance().addMapLayer(cuttedlayer)


    # Function for loading the random pool layer:
    def grid_polygon(self, dict, grid_polygon_checker):
        if grid_polygon_checker != 0:
            self.alreadyloaded()
        else:
            itvalue = 1
            for elem in dict:
                one_grid = dict.get(elem)
                one_grid.setName("grid_cell_polygon_" + str(itvalue))
                QgsProject.instance().addMapLayer(one_grid)
                itvalue = itvalue + 1
            grid_polygon_checker = grid_polygon_checker + 1


    # Function for the window if a layer is already loaded:
    def alreadyloaded(self):
        windw = QWidget()
        windw.setWindowTitle("ERROR WINDOW")
        label0 = QLabel("The selected layer is already loaded!")
        cancel_button = QPushButton("CANCEL")
        cancel_button.clicked.connect(lambda: windw.close())
        hbox = QHBoxLayout()
        hbox.addStretch(6)
        hbox.addWidget(cancel_button)
        hbox.addStretch(6)
        vbox = QVBoxLayout()
        vbox.addStretch(2)
        vbox.addWidget(label0)
        vbox.addStretch(1)
        vbox.addLayout(hbox)
        vbox.addStretch(2)
        windw.setLayout(vbox)
        windw.show()


    #--------------------------- CREATING THE DIALOG WINDOW --------------------------------------------------------------


    def run(self):
        """Run method that performs all the real work"""
        # Setting for the QComboBox named cbox:
        self.dlg.cbox.clear()
        loaded_layers = self.iface.mapCanvas().layers()
        layernames = []
        for lay in loaded_layers:
            name = lay.name()
            layernames.append(name)
        self.dlg.cbox.addItems(layernames)
        # Function to get mean of raster data inside polygons:
        self.dlg.rasterbutton.clicked.connect(lambda: self.raster())
        #Connecting the button sampling layer selection:
        self.dlg.samplingbutton.clicked.connect(lambda: self.samplinglayer())
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.randompointcreator()
